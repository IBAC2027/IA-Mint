{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["RootContainer","styled","theme","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","DoneContainer","marginBottom","fontWeight","ItemContainer","MintCountdown","date","status","style","onComplete","renderer","days","hours","minutes","seconds","completed","Paper","elevation","CTAButton","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useAnchorWallet","connect","connected","cluster","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","GIFpreview","Container","marginTop","maxWidth","position","src","alt","paddingBottom","backgroundColor","Grid","container","direction","wrap","item","xs","Typography","formatNumber","asNumber","align","signTransaction","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","e","adapter","name","SolanaMobileWalletAdapterWalletName","preventDefault","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","process","getCandyMachineId","clusterApiUrl","App","endpoint","useMemo","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SlopeWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","WalletDialogProvider","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getFreezePdaState","freezePda","freeze","getMasterEdition","getMetadata","getCandyMachineCreator","getFreezePda","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","toString","freezePdaState","freezeAta","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","blockhash","WalletNotConnectedError","unsignedTxns","getLatestBlockhash","i","Transaction","forEach","add","recentBlockhash","feePayer","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.0729503b.chunk.js","sourcesContent":["import { Paper } from \"@mui/material\";\r\nimport Countdown from \"react-countdown\";\r\nimport React from \"react\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst RootContainer = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  padding: theme.spacing(0),\r\n  \"& > *\": {\r\n    margin: theme.spacing(0.4),\r\n    width: theme.spacing(6),\r\n    height: theme.spacing(6),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    background: \"#384457\",\r\n    color: \"white\",\r\n    borderRadius: 5,\r\n    fontSize: 10,\r\n  },\r\n}));\r\n\r\nconst DoneContainer = styled(\"span\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  margin: 0,\r\n  marginBottom: theme.spacing(0.5),\r\n  height: theme.spacing(3.5),\r\n  padding: theme.spacing(1),\r\n  flexDirection: \"column\",\r\n  alignContent: \"center\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  background: \"#384457\",\r\n  color: \"white\",\r\n  borderRadius: 5,\r\n  fontWeight: \"bold\",\r\n  fontSize: 18,\r\n}));\r\n\r\nconst ItemContainer = styled(\"span\")({\r\n  fontWeight: \"bold\",\r\n  fontSize: 18,\r\n});\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <DoneContainer>{status}</DoneContainer> : null;\r\n    } else {\r\n      return (\r\n        <RootContainer style={style}>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>{hours < 10 ? `0${hours}` : hours}</ItemContainer>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </ItemContainer>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <ItemContainer>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </ItemContainer>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </RootContainer>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { CandyMachineAccount } from \"./candy-machine\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from \"@identity.com/solana-gateway-ts\";\r\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return \"SOLD OUT\";\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return \"WHITELIST MINT\";\r\n    }\r\n\r\n    return \"MINT\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find((state) => previousGatewayStatus === state) &&\r\n      !invalidToStates.find((state) => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\r\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\r\n\r\n  useEffect(() => {\r\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\r\n      console.log(\"Minting after token active\");\r\n      setWaitForActiveToken(false);\r\n      onMint();\r\n    }\r\n  }, [waitForActiveToken, gatewayStatus, onMint]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              setWaitForActiveToken(true);\r\n              await requestGatewayToken();\r\n              console.log(\"after: \", gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\r\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                \"_blank\"\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  \"confirmed\"\r\n                )\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { Container, Snackbar } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Alert from \"@mui/lab/Alert\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n} from \"@solana/web3.js\";\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CANDY_MACHINE_PROGRAM,\r\n  CandyMachineAccount,\r\n  createAccountsForMint,\r\n  getCandyMachineState,\r\n  getCollectionPDA,\r\n  mintOneToken,\r\n  SetupState,\r\n} from \"./candy-machine\";\r\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\r\nimport { MintCountdown } from \"./MintCountdown\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n  network: WalletAdapterNetwork;\r\n  error?: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isValidBalance, setIsValidBalance] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const anchorWallet = useAnchorWallet();\r\n  const { connect, connected, publicKey, wallet } = useWallet();\r\n  const cluster = props.network;\r\n\r\n  const refreshCandyMachineState = useCallback(\r\n    async (commitment: Commitment = \"confirmed\") => {\r\n      if (!publicKey) {\r\n        return;\r\n      }\r\n      if (props.error !== undefined) {\r\n        setAlertState({\r\n          open: true,\r\n          message: props.error,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const connection = new Connection(props.rpcHost, commitment);\r\n\r\n      if (props.candyMachineId) {\r\n        try {\r\n          const cndy = await getCandyMachineState(\r\n            anchorWallet as anchor.Wallet,\r\n            props.candyMachineId,\r\n            connection\r\n          );\r\n          console.log(\"Candy machine state: \", cndy);\r\n          let active = cndy?.state.goLiveDate\r\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\r\n            : false;\r\n          let presale = false;\r\n\r\n          // duplication of state to make sure we have the right values!\r\n          let isWLUser = false;\r\n          let userPrice = cndy.state.price;\r\n\r\n          // whitelist mint?\r\n          if (cndy?.state.whitelistMintSettings) {\r\n            // is it a presale mint?\r\n            if (\r\n              cndy.state.whitelistMintSettings.presale &&\r\n              (!cndy.state.goLiveDate ||\r\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n            ) {\r\n              presale = true;\r\n            }\r\n            // is there a discount?\r\n            if (cndy.state.whitelistMintSettings.discountPrice) {\r\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\r\n            } else {\r\n              setDiscountPrice(undefined);\r\n              // when presale=false and discountPrice=null, mint is restricted\r\n              // to whitelist users only\r\n              if (!cndy.state.whitelistMintSettings.presale) {\r\n                cndy.state.isWhitelistOnly = true;\r\n              }\r\n            }\r\n            // retrieves the whitelist token\r\n            const mint = new anchor.web3.PublicKey(\r\n              cndy.state.whitelistMintSettings.mint\r\n            );\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n              isWLUser = parseInt(balance.value.amount) > 0;\r\n              // only whitelist the user if the balance > 0\r\n              setIsWhitelistUser(isWLUser);\r\n\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = isWLUser && (presale || active);\r\n              }\r\n            } catch (e) {\r\n              setIsWhitelistUser(false);\r\n              // no whitelist user, no mint\r\n              if (cndy.state.isWhitelistOnly) {\r\n                active = false;\r\n              }\r\n              console.log(\r\n                \"There was a problem fetching whitelist token balance\"\r\n              );\r\n              console.log(e);\r\n            }\r\n          }\r\n          userPrice = isWLUser ? userPrice : cndy.state.price;\r\n\r\n          if (cndy?.state.tokenMint) {\r\n            // retrieves the SPL token\r\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\r\n            const token = (await getAtaForMint(mint, publicKey))[0];\r\n            try {\r\n              const balance = await connection.getTokenAccountBalance(token);\r\n\r\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\r\n\r\n              // only allow user to mint if token balance >  the user if the balance > 0\r\n              setIsValidBalance(valid);\r\n              active = active && valid;\r\n            } catch (e) {\r\n              setIsValidBalance(false);\r\n              active = false;\r\n              // no whitelist user, no mint\r\n              console.log(\"There was a problem fetching SPL token balance\");\r\n              console.log(e);\r\n            }\r\n          } else {\r\n            const balance = new anchor.BN(\r\n              await connection.getBalance(publicKey)\r\n            );\r\n            const valid = balance.gte(userPrice);\r\n            setIsValidBalance(valid);\r\n            active = active && valid;\r\n          }\r\n\r\n          // datetime to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.date) {\r\n            setEndDate(toDate(cndy.state.endSettings.number));\r\n            if (\r\n              cndy.state.endSettings.number.toNumber() <\r\n              new Date().getTime() / 1000\r\n            ) {\r\n              active = false;\r\n            }\r\n          }\r\n          // amount to stop the mint?\r\n          if (cndy?.state.endSettings?.endSettingType.amount) {\r\n            const limit = Math.min(\r\n              cndy.state.endSettings.number.toNumber(),\r\n              cndy.state.itemsAvailable\r\n            );\r\n            if (cndy.state.itemsRedeemed < limit) {\r\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n            } else {\r\n              setItemsRemaining(0);\r\n              cndy.state.isSoldOut = true;\r\n            }\r\n          } else {\r\n            setItemsRemaining(cndy.state.itemsRemaining);\r\n          }\r\n\r\n          if (cndy.state.isSoldOut) {\r\n            active = false;\r\n          }\r\n\r\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n          const collectionPDAAccount = await connection.getAccountInfo(\r\n            collectionPDA\r\n          );\r\n\r\n          setIsActive((cndy.state.isActive = active));\r\n          setIsPresale((cndy.state.isPresale = presale));\r\n          setCandyMachine(cndy);\r\n\r\n          const txnEstimate =\r\n            892 +\r\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n            (cndy.state.tokenMint ? 66 : 0) +\r\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n            (cndy.state.gatekeeper ? 33 : 0) +\r\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n          setNeedTxnSplit(txnEstimate > 1230);\r\n        } catch (e) {\r\n          if (e instanceof Error) {\r\n            if (\r\n              e.message === `Account does not exist ${props.candyMachineId}`\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            } else if (\r\n              e.message.startsWith(\"failed to get info about account\")\r\n            ) {\r\n              setAlertState({\r\n                open: true,\r\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                severity: \"error\",\r\n                hideDuration: null,\r\n              });\r\n            }\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: `${e}`,\r\n              severity: \"error\",\r\n              hideDuration: null,\r\n            });\r\n          }\r\n          console.log(e);\r\n        }\r\n      } else {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n          severity: \"error\",\r\n          hideDuration: null,\r\n        });\r\n      }\r\n    },\r\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\r\n  );\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = []\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      if (connected && candyMachine?.program && publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign account setup transaction\",\r\n            severity: \"info\",\r\n          });\r\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                \"Setup transaction succeeded! Please sign minting transaction\",\r\n              severity: \"info\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Mint failed! Please try again!\",\r\n              severity: \"error\",\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Please sign minting transaction\",\r\n            severity: \"info\",\r\n          });\r\n        }\r\n\r\n        const mintResult = await mintOneToken(\r\n          candyMachine,\r\n          publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn\r\n        );\r\n\r\n        let status: any = { err: true };\r\n        let metadataStatus = null;\r\n        if (mintResult) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintResult.mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          );\r\n\r\n          metadataStatus =\r\n            await candyMachine.program.provider.connection.getAccountInfo(\r\n              mintResult.metadataKey,\r\n              \"processed\"\r\n            );\r\n          console.log(\"Metadata status: \", !!metadataStatus);\r\n        }\r\n\r\n        if (status && !status.err && metadataStatus) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          const remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded! You are now the proud owner of an Industrious Alien NFT. Thank you for supporting the project and the future of industrious blue collar workers.\",\r\n            severity: \"success\",\r\n            hideDuration: 10000,\r\n          });\r\n          refreshCandyMachineState(\"processed\");\r\n        } else if (status && !status.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message:\r\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\r\n            severity: \"error\",\r\n            hideDuration: 8000,\r\n          });\r\n          refreshCandyMachineState();\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n          refreshCandyMachineState();\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (function loop() {\r\n      setTimeout(() => {\r\n        refreshCandyMachineState();\r\n        loop();\r\n      }, 20000);\r\n    })();\r\n  }, [refreshCandyMachineState]);\r\n\r\n  const GIFpreview = styled(\"img\")`\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 1.5%;\r\n  `\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n        <GIFpreview src=\"/GIFPreview.gif\" alt=\"GIFPreview\"/>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: \"#151A1F\",\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!connected ? (\r\n            <ConnectButton\r\n              onClick={(e) => {\r\n                if (\r\n                  wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\r\n                ) {\r\n                  connect();\r\n                  e.preventDefault();\r\n                }\r\n              }}\r\n            >\r\n              Connect Wallet\r\n            </ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? \"Discount Price\"\r\n                        : \"Price\"}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: \"bold\" }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: \"flex-end\" }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: \"flex-end\" }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? \"COMPLETED\"\r\n                              : isPresale\r\n                              ? \"PRESALE\"\r\n                              : \"LIVE\"\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                publicKey &&\r\n                anchorWallet?.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      signTransaction: anchorWallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    cluster={cluster}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={(val) => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={\r\n                        isActive ||\r\n                        (isPresale && isWhitelistUser && isValidBalance)\r\n                      }\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={(val) => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={\r\n                      isActive ||\r\n                      (isPresale && isWhitelistUser && isValidBalance)\r\n                    }\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: \"grey\" }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={\r\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\r\n        }\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Home from \"./Home\";\r\nimport { DEFAULT_TIMEOUT } from \"./connection\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@mui/material\";\r\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\r\nimport { SlopeWalletAdapter } from \"@solana/wallet-adapter-slope\";\r\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\r\nimport {\r\n  SolletWalletAdapter,\r\n  SolletExtensionWalletAdapter,\r\n} from \"@solana/wallet-adapter-sollet\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\r\n  } catch (e) {\r\n    console.log(\"Failed to construct CandyMachineId\", e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nlet error: string | undefined = undefined;\r\n\r\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\r\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\r\n  error =\r\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\r\n}\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\r\n  \"devnet\") as WalletAdapterNetwork;\r\nconst rpcHost =\r\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      new PhantomWalletAdapter(),\r\n      new SolflareWalletAdapter({ network }),\r\n      new SlopeWalletAdapter(),\r\n      new SolletWalletAdapter({ network }),\r\n      new SolletExtensionWalletAdapter({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n              network={network}\r\n              error={error}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from \"@project-serum/anchor\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return \"--\";\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\r\n);\r\n\r\nexport const CIVIC_GATEKEEPER_NETWORK =\r\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from(\"gateway\"),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","/* eslint-disable */\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from \"@solana/web3.js\";\r\nimport { sendTransactions, SequenceType } from \"./connection\";\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"./utils\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: null | anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  const subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"processed\",\r\n  });\r\n\r\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\r\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n    return [program, state];\r\n  };\r\n\r\n  const getCurrentBlockTime = async (): Promise<number> => {\r\n    const slot = await connection.getSlot();\r\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\r\n  };\r\n\r\n  const [[program, state], currentBlockTime] = await Promise.all([\r\n    getProgramState(),\r\n    getCurrentBlockTime(),\r\n  ]);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\r\n  const goLiveDate =\r\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getFreezePdaState = async (\r\n  program: anchor.Program,\r\n  freezePda: anchor.web3.PublicKey\r\n): Promise<any> => {\r\n  try {\r\n    const state = await program.account.freeze.fetch(freezePda);\r\n    return state;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getFreezePda = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"collection_authority\"),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        []\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState\r\n): Promise<MintResult | null> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log(\"SetupState: \", setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1\r\n        ),\r\n      ]\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress\r\n  );\r\n\r\n  const freezePda = (await getFreezePda(candyMachineAddress))[0];\r\n  console.log(freezePda.toString());\r\n\r\n  const freezePdaState = await getFreezePdaState(\r\n    candyMachine.program,\r\n    freezePda\r\n  );\r\n\r\n  console.log(\"Freeze state: \");\r\n  console.log(freezePdaState);\r\n\r\n  if (freezePdaState != null) {\r\n    remainingAccounts.push({\r\n      pubkey: freezePda,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: userTokenAccountAddress,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.tokenMint != null) {\r\n      const freezeAta = (\r\n        await getAtaForMint(candyMachine.state.tokenMint, freezePda)\r\n      )[0];\r\n      remainingAccounts.push({\r\n        pubkey: freezeAta,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    })\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\r\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          })\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        \"singleGossip\",\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions\r\n      )\r\n    ).txs.map((t) => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n","/* eslint-disable */\r\nimport {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, \"max\");\r\n\r\n  const tx = await connection.getParsedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach((log) => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][]\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  const toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          \"single\"\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          \"single\"\r\n        );\r\n        ids = ids.concat(txs.map((t) => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      \"Died on \",\r\n      stopPoint,\r\n      \"retrying from instruction\",\r\n      instructions[stopPoint],\r\n      \"instructions length is\",\r\n      instructions.length\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = \"singleGossip\",\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  blockhash?: Blockhash,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = []\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!blockhash) {\r\n    blockhash = (await connection.getLatestBlockhash(commitment)).blockhash;\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    const transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n    transaction.recentBlockhash = blockhash;\r\n    transaction.feePayer = wallet.publicKey;\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\r\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    \"Signed txns length\",\r\n    signedTxns.length,\r\n    \"vs handed in length\",\r\n    instructionSet.length\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i)\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log(\"Failed at txn index:\", i);\r\n        console.log(\"Caught failure:\", e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  blockhash?: Blockhash\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n\r\n    transaction.recentBlockhash =\r\n      blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\r\n    if (includesFeePayer) {\r\n      transaction.feePayer = signers[0].publicKey;\r\n    } else {\r\n      transaction.feePayer = wallet.publicKey;\r\n    }\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  const options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  blockhash?: Blockhash,\r\n  beforeSend?: () => void\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash =\r\n    blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\r\n  if (includesFeePayer) {\r\n    transaction.feePayer = signers[0].publicKey;\r\n  } else {\r\n    transaction.feePayer = wallet.publicKey;\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    }\r\n  );\r\n\r\n  console.log(\"Started awaiting confirmation for\", txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      \"recent\",\r\n      true\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error(\"Transaction failed: Custom instruction error\");\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error(\"Timeout Error caught\", err);\r\n    if (err.timeout) {\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, \"single\")\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith(\"Program log: \")) {\r\n            throw new Error(\r\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString(\"base64\");\r\n  const config: any = { encoding: \"base64\", commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\r\n  if (res.error) {\r\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  try {\r\n    await connection.removeSignatureListener(subId);\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}